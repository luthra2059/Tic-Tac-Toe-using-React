{"version":3,"sources":["logo.svg","components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","onClick","value","Board","i","this","squares","style","height","renderSquare","Component","calculateWinner","lines","length","a","b","c","Game","state","xIsNext","stepNumber","history","Array","fill","step","setState","slice","concat","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.daff44e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\n\r\nfunction Square(props){\r\n    \r\n\r\n    return (\r\n        <button className=\"btn btn-outline-warning\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Square; ","import React, { Component } from 'react'\r\nimport Square from './Square'\r\n\r\nclass Board extends Component {\r\n renderSquare(i){\r\n     return <Square value={this.props.squares[i]} onClick = { () => this.props.onClick(i)} />\r\n }\r\n render() {\r\n  return(\r\n   <div style={{height:100}}>\r\n        <div className=\"border-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"border-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"border-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n        </div>\r\n   </div>\r\n    )\r\n   }\r\n }\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './Board';\r\n\r\n\r\nclass Game extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            xIsNext : true,\r\n            stepNumber: 0,\r\n            history: [\r\n                { squares : Array(9).fill(null)}\r\n            ]\r\n        }\r\n    }\r\n    jumpTo(step){\r\n            \r\n        this.setState({\r\n            stepNumber:step,\r\n            xIsNext:step%2==0\r\n        });\r\n    }\r\n    handleClick(i){\r\n        const history = this.state.history.slice(0,this.state.stepNumber+1);\r\n        const current = history[history.length-1];\r\n        const squares = current.squares.slice();\r\n        const winner = calculateWinner(squares);\r\n        if(winner||squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext?'X':'O';\r\n        this.setState({\r\n            history: history.concat({\r\n                squares:squares\r\n            }),\r\n            xIsNext:!this.state.xIsNext,\r\n            stepNumber: history.length\r\n\r\n        })\r\n    }\r\n    render(){\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber]\r\n        const winner = calculateWinner(current.squares);\r\n        const moves = history.map((step, move)=>{\r\n            const desc = move?''+move:'start game'\r\n            return (\r\n                <li className=\"list-group-item\" key={move}>\r\n                    <button className=\"btn btn-md btn-warning btn-block\" onClick={()=>{this.jumpTo(move)}}>{desc}</button>\r\n                </li>\r\n            )\r\n        });\r\n        let status ;\r\n        if(winner){\r\n            status = 'Winner is : '+ winner;\r\n\r\n        }else{\r\n            status = 'Next Player is : '+(this.state.xIsNext?'X':\"O\")\r\n        }\r\n        \r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board onClick={(i)=>this.handleClick(i)} squares={current.squares}/>\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <h5 className=\"text-warning\">{status}</h5>\r\n                    <ul className=\"list-group\">{moves}</ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nfunction calculateWinner(squares){\r\n\r\n    const lines = [\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7,8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6]\r\n    ];\r\n    for(let i=0;i<lines.length;i++){\r\n        const [a,b,c] = lines[i];\r\n        if(squares[a]&&squares[a]==squares[b]&&squares[b]==squares[c]){\r\n            return squares[a];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\nexport default Game;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/Game'\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}